#-------------------------------------------------------------------------------
# Copyright (C) 2013 Andrei Olaru, Marius-Tudor Benea, Nguyen Thi Thuy Nga, Amal El Fallah Seghrouchni, Cedric Herpson.
# 
# This file is part of tATAmI-Android.
# 
# tATAmI-Android is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
# 
# tATAmI-Android is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License along with tATAmI-Android.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
This documents contains several steps to be followed in order to launch the Android version of S-CLAIM. This guide was written based on the use of the emulator included in the Android SDK. If launching the application on an Android mobile phone is desired, some steps may be skipped.

As a requirement, a version of Android greater or equal with 2.1 (API level 7) is needed.

1. S-CLAIM should be running on the main machine (administration machine). It must be verified that the JADE platform was launched with the "-localhost" argument set to the IP of the machine in the network where S-CLAIM will be run. It should not be of the form: localhost or 127.0.0.1, case in which the Android device that will later connect will use it as an address towards itself. 

2. In order to start the application from Eclipse, after the add-on for Android was installed ( http://developer.android.com/sdk/eclipse-adt.html ), and at least one compatible (API level 7 or more) AVD (Android Virtual Device) was created, it is sufficient to Run or Debug the project as an Android application. The desired AVD could be selected in: Run or Debug configurations -> Target. If not, it will be selected automatically. Skip step 3.

3. Having the .apk file representing the compiled application, the application will be installed, as any other Android application.

4. On the Android emulators, it will be needed to forward a port of the local machine toward a port of the emulator, using the command adb. For example, if the Android SDK folders were added to PATH, forwarding a port could be done using:
		adb forward tcp:1098 tcp:1098
case in which the port 1098 (the first one) of the local machine is forwarded to the port 1098 of the emulator. This command is valid only when one emulator runs on the machine. In case of more than one emulator, see the Android SDK documentation. This step is required after each restart of the AVD used. 

5. After opening the Claim2 application for Android (which, when starting the application from Eclipse, happens, by default, automatically) we need to connect it to the S-Claim platform. For this, we'll have to give a name to the device (container of the JADE platform that will contain the agents running on the device). Further, we have to set the IP and port of the S-Claim server (Administration machine). One alternative is to use, from the emulator only, the address 10.0.2.2, which is automatically redirected to the local machine, if the S-Claim platform runs there. Then, we must set the IP and port used by the Android device itself, which, while testing locally using an emulator, could be "localhost" and the port of the local machine that was redirected to the emulator (1098 in the example above).

6. By clicking "Connect", the Android device will run a JADE standalone container on it, having the name specified in the first text field, that will further be used as a normal container by S-Claim. In order to do this, though, the container should be specified in the scenario with the parameter create set to false (so, create="false"), so that the platform will know that this container will be created externally. One important thing to mention is that the container is required to exist when the agents are created and when the simulation starts.

The end.
