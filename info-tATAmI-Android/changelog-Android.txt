#-------------------------------------------------------------------------------
# Copyright (C) 2013 Andrei Olaru, Marius-Tudor Benea, Nguyen Thi Thuy Nga, Amal El Fallah Seghrouchni, Cedric Herpson.
# 
# This file is part of tATAmI-Android.
# 
# tATAmI-Android is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.
# 
# tATAmI-Android is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License along with tATAmI-Android.  If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------
====== The changelog ======

// This file should be in dokuwiki syntax [[http://www.dokuwiki.org/syntax]] //
// exception: use - for all list levels instead of * (for readability in eclipse)
// exception: use -- and -/ instead of <del> and </del> for strikethroughs
// file should not contain lines longer than 120 characters (eclipse doesn't wrap lines in text files)

// there are templates for new commits at the end of the file (feel free to add tyour own) //


====== 17.01.2013 repair Android complete (andreiolaru) ======
  - merged the repair_android branch into master.
  - updated PC-core and changelog

====== 10-16.01.2013 repairing Android project (Tudor Benea & andreiolaru) ======
  - completed work on the new Android GUI that is based on tatami.core
    - We gave up to the idea of having an activity for each agent.
    - Some other modifications for the GUI modification / integration part
    - Added function library for simpleScenarioE.
    - Corrected the forward-port bat and updated the running instructions.
    - The GUI was adapted to the structure existing on PC.
    - Fixed log types.
    - The E chat scenario was created for Android devices too and it works as it should.

====== 14.12.2012 Fixed importer (andreiolaru) ======
  - fixed importer.xml (was not working on Linux)

====== 06.12.2012 Finished restructuring PC project + import (andreiolaru) ======
  - imported sources that do not have errors.
  - there are, however, errors in the android-specific classes.

====== 29.11.2012 Fixing the project organization / compiling (andreiolaru) ======
  - switched from importing a PC-compiled jar to copying classes in core and some utils.
  - currently has many errors. 

====== 23.11.2012 Organizational project fixes and changes (andreiolaru) ======
  - added the gitignore file.
  - project preferences/properties.
  - added the tATAmI-PC-core jar and the importer script.
  - added the forwarder bat

====== 11.26.2012 (New version of the project) (Tudor Benea) ======
  - New version of the project, based on the first version of tATAmI-Android firstly developed at LIP6, in 2011.
  - The repository was reorganized in order to make the new version of the project available for the other members of
   the team to use it and to modify it and also to keep track of all the efforts made for this project. 


// All the following logs concern the version made at UPB of tATAmI for Android, which is kept currently only for
 historical reasons //

====== 06.18.2012 ( Android doOutput, ConnectInput) (Moscalenco Iulia) ======

  - updated ClaimBehavior, all gui classes are casted to AgentGui
  - AgentGui for Android Class were renamed in AgentGuiActivity, small changes in Gui representation(added a new Text area for log)
  - Android gui opens before agent starts 
  - DoOutput works
  
====== 09.06.2012 simpleScenarioE complete (andreiolaru) ======

  - completed scenario E, it works.
  - more fixes in ClaimBehavior
  - updated BootSettings with settings appropriate for scenarioE


====== 06.09.2012 ( Android participants menu ) (Moscalenco Iulia) ======

  - Each agent contains a menu that will display participants
  - Added new menu for ChatActivity
  - TODO get list of agents from container
	

====== 06.09.2012 ( Android GUI ) (Moscalenco Iulia) ======

  - New Gui for ManagerActivity,( using previous settings menu)
  - rearranged code in AgentGui, PlatformUtils, VisualizableAgent


====== 08.06.2012 ScenarioE partial (andreiolaru) =======

  - Fixed most comments and some other issues (in ClaimBehavior).
  
  - preparing some changes in symbol table management
  - implemented the input part of the ScenarioE (simple chat)
  - input works ok
  - if any errors appear, let me know.


====== 08.06.2012 Claim Behavior rewrite (WORK IN PROGRESS) (andreiolaru) ======

  - WORK STILL IN PROGRESS
  
  - Rewritten ClaimBehavior in a great measure, making code clearer and easier to use
  - Duplicate code in ClaimBehavior mostly eliminated
  - Code not yet commented and comments are incoherent with the code
  - in principle there are no errors (on scenarios A-D), but that's left to further check
 
  - ScenarioE written, but not yet tested
  - Modified classpath to link the JADE sources and doc (already in the project)
  - Improved the .gitignore files.


====== 03.06.2012 ( Android ) (Moscalenco Iulia) ======

  - Small changes in AgentGui and PlatformUtils
  - Added new Classes :
    * AndroidJadeInterface implements JadeInterface. This class is responsible for ConectToPlatform, CreateAgent, StartPlatform in Android.
    * ChatActivity extends Activity implements AgentGui =>  All agents that run on Android will have this gui class.\\
=> AgentGui.java will inspect platform and returns the org.gui.ChatActivity for Android Platform. TODO: default_package and defacult_gui_class
 At this moment an agent that moves from PC to Android platform will get ChatActivity as gui class. I'm trying to instantiate this Activity.(TODO)
 

===== 29.05.2012 agentGui, input and output (andreiolaru) =====

  - adapted AgentGui
  - the getComponent() function was left only in PCDefaultAgentGui, and deprecated
  - added the InputListener interface (in AgentGui)
  - eliminated errors in various agent classes using the getComponent() function, but they are not yet adapted to use AgentGui in a proper manner 
  - decoupled the Log from the TextArea, by means of the DisplayEntity interface (in Log)
  - created the Log2AgentGui class, that should interface between the log and the agent gui
  - created the TextAreaLogDisplay, that implements DisplayEntity, in order to eliminate errors in test classes. Should not be used in the main classes of the project!
  - adapted VisualizableAgent to use Log2AgentGui, implemented the appropriate code in PCDefaultAgentGui.doOutput()


====== 27.05.2012 (PlatformUtils, logWrapper for Android, Android GUI) (Moscalenco Iulia) ======

  - Changed package name and main class name in tATAmI-Android
  - added new Activities:
    * SettingsActivity : input for host and port
    * ChatActivity : must be a agent interface //TODO
  - util.platformUtils.PlatformUtils  detects platform in  tATAmI-PC
  - Implemented a log wrapper for Android -> util.logging.JadeLogWrapper => must be tested if it gets class name
  - PlatformUtils returns org.gui.ChatActivity for Android jadeInterfaceClass //TODO 
  - Steps to run application : 
    * run tATAmI-PC
    * run tATAmI-Android
    * press menu , add port and host, press use
    * add a name, press send
  

====== 09.05.2012 running previous example on emulator (Moscalenco Iulia) ======

  -Requirements : 
    - Android sdk 2.3.3 
    - adb in Path
    - Computer -> right click Properties -> Advanced system settings -> Advanced -> Environment Variables ->add in Path where adb.exe is located (example: C:\Program Files\Android\android-sdk\platform-tools)
	
  -After emulator is started :
    - run run.bat in the project and type emulator's port

  -If project is running on phone not necessary to forward port/run run.bat
  -IP configuration : res->values->strings.xml->main_ip
  -Linked tATAmI-PC project to tATAmI-Android 
  -Changed tATAmI-PC lib folder in libs


====== 03.05.2012 replacing the split container creation with a full container (mirunapopescu89) ======

  - ExempluAcivity creates now a full container on Android device instead of a slip one
  - this version supports only running the application on a real device
  - running on emulator doesn't work because of the -local-host parameter
  - separated the configuration parameters to be easily modified => res/strings.xml


===== 02.05.2012 small fixes (andreiolaru) ===== 

  - fixed small error in SimulationAgent;
  - refactored GuiPlatform to Platform;


===== 30.04-02.05.2012 android project (iulia, miruna) =====

(in romanian; chronological:)

  - Am adaugat exemplul de jade pe Android al Mirunei pentru a face un fisier de configurare care sa porneasca si serverul si clientul. Inca nu am daugat Serverul.
  - Am adaugat libraria Android3.2 astfel incat sa se pastreze in proiect
  - resolving compiling errors
  - added simple scenario
  - link-ing tatami-pc project 
  - Versiunea de dsk  de la 3.2 si >> accepta fisierele .jar sa fie intr-un folder libs (De 2 zile nu reuseam sa rulez aplicatia, pana nu am redenumit folderul)


===== 29.04.2012 package reorganizing and component isolation (andreiolaru) =====

  - promoted visualization to the status of core package, as it contains an essential part of the system, as well as the VisualizableAgent layer
  - promoted the webServices package to core, for the same reasons
  - added an argument to the primary form of log.getLogger()
  - wrapped the log4j logger; there is still need to check if the wrapping has been correctly and completely done
  - wrapped the agent GUIs:
    - all GUIs implement AgentGui;
    - for each platform there is a XXXDefaultAgentGui, replace XXX with the platform (see AgentGui.GuiType); placed in core.visualization
    - specific agent GUIs extend the default and are placed in package agentPackagesPackage.gui.XXX, replace XXX with platform name (lower case)
  - created the BaseAgent class as a layer below VisualizableAgent; it will manage agent parameters and knowledge base;
  - all agent parameter names are now registered in ParametrizedAgent;
  - input and output constructs probably don't work any more;
  - AbstractHierarchicalAgent is not abstract anymore, name changed;

  * also fixed multiple warnings in files modified by the Logger wrapping.
  * removed BootTestWithAndroid and MobileAgent as they were neither useful nor used.
  * removed Tudor's testing package as it had many errors due to recent changes.
  
  * only checked this commit against simpleScenarioC. There may be many more bugs. Please signal them.
  * also verified the simpleScenarioC in a distributed context (files not kept) and issue #1 is resolved.




===== 18.04.2012 (fixes to previous commit) (andreiolaru) =====


fixes:
  - initialization of SimulationAgent using the new parameter organization (AgentParameters)
  - enabled the extraction of the protocol for simulation claim messages from the content (in SimulationAgent, class SimulationTimerTask)
  - moved the parsing of Claim files and locating the adfs and java attachments into a static function in ClaimAgent, it will be called at system start (instead of after Create Agents)
  - added graph to knowledge in AbstractHierarchicalAgent
  - small fix in TextGraphRepresentation.readRepresentation()
  - small fix in ClaimBehavior for knowledge reading
  
other:
  - added simpleScenarioB, see its information.txt for details.
  - added simpleScenarioC, see its information.txt for details.


===== 17.04.2012 (boot and params) (andreiolaru) =====

Trying to fix bug #1; issue probably fixed, didn't check yet.

Why it happens: people who worked on goal-driven agents add parameters to the parameter array of the agent, therefore the location that the agent should move to gets to be parameter 6 instead of 4.

Underlying problem: the parameter mechanism is crappy, there are both name->value parameters and the array items, and nobody knows which layer of the stack (Visualizable/Hierarchical/etc) uses which parameters.

Fix principle: all parameters have a name (String) and a value (String). Then each layer does whatever it wants with them.
To help with knowing which layer uses which parameters, the layers offer a function saying what parameters they need.
Since I am fixing this, I'm also eliminating differences between different types of agents (non-CLAIM, CLAIM, goal-driven CLAIM, etc) in the processing in Boot.  

significant changes:
  - changed the parameters mechanism for sending the creation parameters to the agent. on the simple schenario it appears to work, however it is not fully verified and I don't think all the solutions were good. It might still be slightly adjusted, but the general idea is there.
  - scenario (the new scenario schema is scnanrioSchema2.xml):
    * in the scenario there is only one type of element for an agent: the "agent" element
    * an agent only contains "parameter" elements
    * a parameter contains two Strings: a name and a value
    * the scenario, parameter and kb schemas will not be needed any more, they are kept only for backwards compatibility
  - the old Boot becomes oldBoot, for backwards compatibility 
  - restructured the scenario folder a bit, put pahse1 package in agent_packages.

smaller fixes:
  - clear and comment simulation/Boot.java
  - changed the logging tag in Boot to "boot" => it will now show up in the log as "[boot]".
  - added simulation/BootSettings.java which contains all custom settings you might want. Use comments to hide other people's settings.

===== 17.04.2012 (graph representation) (andreiolaru) =====

  - moved all graph representation-related classes to the representation package
  - slight modifications in loggin.Unit and related changes in other files (graphical, testing, and graph packages)
  - warning fixes throughout the graph package
  
  - added reading feature to the text graph representation, so it can read graphs from a linear representation\\ (the reverse of representing the graph)
 

  
  
====== ..2013 - (Tudor Benea) ======
====== ..2013 - (andreiolaru) ======
  - template
    - subitem
